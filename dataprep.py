# -*- coding: utf-8 -*-
"""Recruit Restaurant Visitor Forecasting_Dataprep.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Lbq2IzCIjoucq5j8cAKM7hm532bSww9Z
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings("ignore")
import seaborn as sns
import gc
import datetime as dt

def reduce_mem_usage(df, verbose=True):
    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']
    start_mem = df.memory_usage(deep=True).sum() / 1024 ** 2 # just added 
    for col in df.columns:
        col_type = df[col].dtypes
        if col_type in numerics:
            c_min = df[col].min()
            c_max = df[col].max()
            if str(col_type)[:3] == 'int':
                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:
                    df[col] = df[col].astype(np.int8)
                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:
                    df[col] = df[col].astype(np.int16)
                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:
                    df[col] = df[col].astype(np.int32)
                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:
                    df[col] = df[col].astype(np.int64)  
            else:
                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:
                    df[col] = df[col].astype(np.float16)
                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:
                    df[col] = df[col].astype(np.float32)
                else:
                    df[col] = df[col].astype(np.float64)    
    end_mem = df.memory_usage(deep=True).sum() / 1024 ** 2
    percent = 100 * (start_mem - end_mem) / start_mem
    print('Mem. usage decreased from {:5.2f} Mb to {:5.2f} Mb ({:.1f}% reduction)'.format(start_mem, end_mem, percent))
    return df

train=pd.read_csv('air_visit_data.csv', parse_dates=['visit_date'])
air_reserve=pd.read_csv('air_reserve.csv', parse_dates=['visit_datetime','reserve_datetime'])
hpg_reserve=pd.read_csv('hpg_reserve.csv', parse_dates=['visit_datetime','reserve_datetime'])
air_store_info=pd.read_csv('air_store_info.csv')
hpg_store_info=pd.read_csv('hpg_store_info.csv')
holiday=pd.read_csv('date_info.csv', parse_dates=['calendar_date'])
hpg_to_air=pd.read_csv('store_id_relation.csv')
test=pd.read_csv('sample_submission.csv').drop('visitors', axis=1)

train["visitors"] = train["visitors"].apply(lambda x: np.log1p(float(x)) if float(x) > 0 else 0)
air_reserve["reserve_visitors"] = air_reserve["reserve_visitors"].apply(lambda x: np.log1p(float(x)) if float(x) > 0 else 0)
hpg_reserve["reserve_visitors"] = hpg_reserve["reserve_visitors"].apply(lambda x: np.log1p(float(x)) if float(x) > 0 else 0)

for df in [air_reserve, hpg_reserve]:
  df['visit_date']=df['visit_datetime'].apply(lambda x: x.date())
  df['visit_time']=df['visit_datetime'].apply(lambda x:x.time())
  df['reserve_date']=df['reserve_datetime'].apply(lambda x: x.date())
  df['reserve_time']=df['reserve_datetime'].apply(lambda x:x.time())

hpg_air_store=hpg_reserve.merge(hpg_to_air, on='hpg_store_id', how='left')

hpg_air_store=hpg_air_store[hpg_air_store['air_store_id'].notnull()].reset_index(drop=True).drop('hpg_store_id', axis=1)

air_reserve=pd.concat([air_reserve,hpg_air_store]).reset_index(drop=True).sort_values('visit_date').reset_index(drop=True)

del hpg_air_store,hpg_reserve,hpg_to_air
gc.collect()

test['visit_date']=test['id'].str.split(pat='_', expand=True)[2]
test['air_store_id']=test['id'].str.split(pat='_', expand=True)[0]+'_'+test['id'].str.split(pat='_', expand=True)[1]
test.drop('id', axis=1, inplace=True)

air_reserve.head()

test['visit_date']=pd.to_datetime(test['visit_date'])

holiday['day_after_holiday']=holiday['holiday_flg'].shift().fillna(0)
holiday['day_before_holiday']=holiday['holiday_flg'].shift(-1).fillna(0)

holiday.drop('day_of_week', axis=1, inplace=True)

train=train.merge(holiday, left_on='visit_date', right_on='calendar_date', how='left').drop('calendar_date', axis=1)
train=train.merge(air_store_info,on='air_store_id', how='left')

test=test.merge(holiday, left_on='visit_date', right_on='calendar_date', how='left').drop('calendar_date', axis=1)
test=test.merge(air_store_info,on='air_store_id', how='left')

air_reserve['visit_date']=pd.to_datetime(air_reserve['visit_date'])
air_reserve['reserve_date']=pd.to_datetime(air_reserve['reserve_date'])

from datetime import datetime

air_reserve['visit_time']=air_reserve['visit_time'].apply(lambda x:int(x.strftime('%H')))
air_reserve['reserve_time']=air_reserve['reserve_time'].apply(lambda x:int(x.strftime('%H')))

air_reserve.loc[(air_reserve['visit_time']>=6) & (air_reserve['visit_time']<11),'visit_day_part']='morning'
air_reserve.loc[(air_reserve['visit_time']>=11) & (air_reserve['visit_time']<16),'visit_day_part']='noon'
air_reserve.loc[(air_reserve['visit_time']>=16) & (air_reserve['visit_time']<22),'visit_day_part']='night'
air_reserve.loc[(air_reserve['visit_time']>=22),'visit_day_part']='late_night'
air_reserve.loc[(air_reserve['visit_time']>=0) & (air_reserve['visit_time']<6),'visit_day_part']='mid_night'

air_reserve.loc[(air_reserve['reserve_time']>=6) & (air_reserve['reserve_time']<12),'reserve_day_part']='morning'
air_reserve.loc[(air_reserve['reserve_time']>=12) & (air_reserve['reserve_time']<18),'reserve_day_part']='noon'
air_reserve.loc[(air_reserve['reserve_time']>=18),'reserve_day_part']='night'
air_reserve.loc[(air_reserve['reserve_time']>=0) & (air_reserve['reserve_time']<6),'reserve_day_part']='mid_night'

air_reserve['res_vis_timediff']=air_reserve['visit_datetime']-air_reserve['reserve_datetime']
air_reserve['res_vis_timediff']=air_reserve['res_vis_timediff'].apply(lambda x: divmod(x.total_seconds(), 3600)[0])

air_reserve=air_reserve.merge(air_store_info,on='air_store_id', how='left')

air_reserve.head()

most_visit_daypart=air_reserve.groupby(['air_store_id','visit_date'])['visit_day_part'].agg(pd.Series.mode).to_frame().reset_index().rename({'visit_day_part':'genre_most_visit_daypart'}, axis=1).reset_index(drop=True)

train=train.merge(most_visit_daypart, on=['air_store_id','visit_date'], how='left')
test=test.merge(most_visit_daypart, on=['air_store_id','visit_date'], how='left')

air_reserve=reduce_mem_usage(air_reserve)

def split_date(df):
    df['Year'] = df.visit_date.dt.year
    df['Month'] = df.visit_date.dt.month
    df['Day'] = df.visit_date.dt.day
    df['DayofWeek']=df.visit_date.dt.dayofweek
    df['WeekOfYear'] = (df.visit_date.dt.isocalendar().week)*1.0

split_date(air_reserve)
split_date(train)
split_date(test)

train.loc[train['DayofWeek']>=5, 'holiday_flg']=1
test.loc[test['DayofWeek']>=5, 'holiday_flg']=1

air_reserve['early_reserv']=air_reserve['res_vis_timediff']>24
air_reserve['late_reserv']=air_reserve['res_vis_timediff']<=24

air_reserve['visit_date_mean_reserved_visitors']=air_reserve.groupby(['air_store_id','visit_date'])['reserve_visitors'].transform('mean')
air_reserve['visit_date_median_reserved_visitors']=air_reserve.groupby(['air_store_id','visit_date'])['reserve_visitors'].transform('median')
air_reserve['visit_date_count_reserved_visitors']=air_reserve.groupby(['air_store_id','visit_date'])['reserve_visitors'].transform('count')
air_reserve['visit_date_mean_visit_time']=air_reserve.groupby(['air_store_id','visit_date'])['visit_time'].transform('mean')
air_reserve['visit_date_median_visit_time']=air_reserve.groupby(['air_store_id','visit_date'])['visit_time'].transform('median')
air_reserve['visit_date_mean_res_vis_timediff']=air_reserve.groupby(['air_store_id','visit_date'])['res_vis_timediff'].transform('mean')
air_reserve['visit_date_median_res_vis_timediff']=air_reserve.groupby(['air_store_id','visit_date'])['res_vis_timediff'].transform('median')

air_reserve['Day_mean_reserved_visitors']=air_reserve.groupby(['air_store_id','Day'])['reserve_visitors'].transform('mean') 
air_reserve['Day_median_reserved_visitors']=air_reserve.groupby(['air_store_id','Day'])['reserve_visitors'].transform('median')
air_reserve['Day_count_reserved_visitors']=air_reserve.groupby(['air_store_id','Day'])['reserve_visitors'].transform('count')
air_reserve['Day_mean_visit_time']=air_reserve.groupby(['air_store_id','Day'])['visit_time'].transform('mean')
air_reserve['Day_median_visit_time']=air_reserve.groupby(['air_store_id','Day'])['visit_time'].transform('median')
air_reserve['Day_mean_res_vis_timediff']=air_reserve.groupby(['air_store_id','Day'])['res_vis_timediff'].transform('mean')
air_reserve['Day_median_res_vis_timediff']=air_reserve.groupby(['air_store_id','Day'])['res_vis_timediff'].transform('median')

air_reserve['DayofWeek_mean_reserved_visitors']=air_reserve.groupby(['air_store_id','DayofWeek'])['reserve_visitors'].transform('mean') 
air_reserve['DayofWeek_median_reserved_visitors']=air_reserve.groupby(['air_store_id','DayofWeek'])['reserve_visitors'].transform('median')
air_reserve['DayofWeek_count_reserved_visitors']=air_reserve.groupby(['air_store_id','DayofWeek'])['reserve_visitors'].transform('count')
air_reserve['DayofWeek_mean_visit_time']=air_reserve.groupby(['air_store_id','DayofWeek'])['visit_time'].transform('mean')
air_reserve['DayofWeek_median_visit_time']=air_reserve.groupby(['air_store_id','DayofWeek'])['visit_time'].transform('median')
air_reserve['DayofWeek_mean_res_vis_timediff']=air_reserve.groupby(['air_store_id','DayofWeek'])['res_vis_timediff'].transform('mean')
air_reserve['DayofWeek_median_res_vis_timediff']=air_reserve.groupby(['air_store_id','DayofWeek'])['res_vis_timediff'].transform('median')

air_reserve_1=air_reserve[['air_store_id','visit_date','visit_date_mean_reserved_visitors',
       'visit_date_median_reserved_visitors', 'visit_date_mean_visit_time',
       'visit_date_median_visit_time', 'visit_date_mean_res_vis_timediff',
       'visit_date_median_res_vis_timediff','visit_date_count_reserved_visitors']].drop_duplicates(keep='first')

air_reserve_2=air_reserve[['air_store_id','Day','Day_mean_reserved_visitors',
       'Day_median_reserved_visitors', 'Day_mean_visit_time',
       'Day_median_visit_time', 'Day_mean_res_vis_timediff',
       'Day_median_res_vis_timediff','Day_count_reserved_visitors']].drop_duplicates(keep='first')

air_reserve_3=air_reserve[['air_store_id','DayofWeek','DayofWeek_mean_reserved_visitors',
       'DayofWeek_median_reserved_visitors', 'DayofWeek_mean_visit_time',
       'DayofWeek_median_visit_time', 'DayofWeek_mean_res_vis_timediff',
       'DayofWeek_median_res_vis_timediff','DayofWeek_count_reserved_visitors']].drop_duplicates(keep='first')

train=train.merge(air_reserve_1, on=['air_store_id','visit_date'], how='left')

train=train.merge(air_reserve_2, on=['air_store_id','Day'], how='left')

train=train.merge(air_reserve_3, on=['air_store_id','DayofWeek'], how='left')

test=test.merge(air_reserve_1, on=['air_store_id','visit_date'], how='left')

test=test.merge(air_reserve_2, on=['air_store_id','Day'], how='left')

test=test.merge(air_reserve_3, on=['air_store_id','DayofWeek'], how='left')

temp_1=air_reserve[air_reserve['early_reserv']=='True'].groupby(['air_store_id','visit_date'], 
                                                                       as_index=False)['reserve_visitors'].mean().rename(columns={'reserve_visitors':'mean_res_early_res'})
temp_2=air_reserve[air_reserve['early_reserv']=='True'].groupby(['air_store_id','visit_date'], 
                                                                       as_index=False)['reserve_visitors'].sum().rename(columns={'reserve_visitors':'sum_res_early_res'})
temp_3=air_reserve[air_reserve['late_reserv']=='True'].groupby(['air_store_id','visit_date'], 
                                                                       as_index=False)['reserve_visitors'].mean().rename(columns={'reserve_visitors':'mean_res_late_res'})
temp_4=air_reserve[air_reserve['late_reserv']=='True'].groupby(['air_store_id','visit_date'], 
                                                                       as_index=False)['reserve_visitors'].sum().rename(columns={'reserve_visitors':'sum_res_late_res'})

train=train.merge(temp_1, how='left', on=['air_store_id','visit_date'])
train=train.merge(temp_2, how='left', on=['air_store_id','visit_date'])
train=train.merge(temp_3, how='left', on=['air_store_id','visit_date'])
train=train.merge(temp_4, how='left', on=['air_store_id','visit_date'])

test=test.merge(temp_1, how='left', on=['air_store_id','visit_date'])
test=test.merge(temp_2, how='left', on=['air_store_id','visit_date'])
test=test.merge(temp_3, how='left', on=['air_store_id','visit_date'])
test=test.merge(temp_4, how='left', on=['air_store_id','visit_date'])

train=reduce_mem_usage(train)

test=reduce_mem_usage(test)

del air_reserve_1,air_reserve_2, air_reserve_3, air_reserve, temp_1,temp_2,temp_3,temp_4
gc.collect()

unique_stores = test['air_store_id'].unique()
stores_df = pd.concat([pd.DataFrame({'air_store_id': unique_stores, 'DayofWeek': [i]*len(unique_stores)}) for i in range(7)], axis=0, ignore_index=True).reset_index(drop=True)

tmp = train.groupby(['air_store_id','DayofWeek'], as_index=False)['visitors'].min().rename(columns={'visitors':'min_visitors'})
stores_df=stores_df.merge(tmp, how='left', on=['air_store_id','DayofWeek'])

tmp = train.groupby(['air_store_id','DayofWeek'], as_index=False)['visitors'].mean().rename(columns={'visitors':'mean_visitors'})
stores_df=stores_df.merge(tmp, how='left', on=['air_store_id','DayofWeek'])

tmp = train.groupby(['air_store_id','DayofWeek'], as_index=False)['visitors'].median().rename(columns={'visitors':'median_visitors'})
stores_df=stores_df.merge(tmp, how='left', on=['air_store_id','DayofWeek'])

tmp = train.groupby(['air_store_id','DayofWeek'], as_index=False)['visitors'].max().rename(columns={'visitors':'max_visitors'})
stores_df=stores_df.merge(tmp, how='left', on=['air_store_id','DayofWeek'])

tmp = train.groupby(['air_store_id','DayofWeek'], as_index=False)['visitors'].count().rename(columns={'visitors':'count_visitors'})
stores_df=stores_df.merge(tmp, how='left', on=['air_store_id','DayofWeek'])

train =train.merge(stores_df, how='inner', on=['air_store_id','DayofWeek']) 
test = test.merge(stores_df, how='left', on=['air_store_id','DayofWeek'])

train['var_max_lat'] = train['latitude'].max() - train['latitude']
train['var_max_long'] = train['longitude'].max() - train['longitude']
test['var_max_lat'] = test['latitude'].max() - test['latitude']
test['var_max_long'] = test['longitude'].max() - test['longitude']

area_genre_count=train.groupby(['air_area_name','air_genre_name'])['air_genre_name'].count().to_frame().rename({'air_genre_name':'genre_count_area'}, axis=1).reset_index()
area_genre_count['genre_count_total']=area_genre_count.groupby(['air_area_name'])['genre_count_area'].transform('sum')
area_genre_count['genre_area_ratio']=area_genre_count['genre_count_area']/area_genre_count['genre_count_total']

train=train.merge(area_genre_count, on=['air_area_name','air_genre_name'], how='left')
test=test.merge(area_genre_count, on=['air_area_name','air_genre_name'], how='left')

train['is_test']=False
test['is_test']=True
df=pd.concat([train,test])
df.sort_values(['air_store_id','visit_date','DayofWeek'],inplace=True)
df['shifted_visitors']=df['visitors'].shift(39).where(df.air_store_id.eq(df.air_store_id.shift(39))).fillna(0)

df['rolling_mean_DayofWeek_shifted_visitors']=df.groupby(['air_store_id','DayofWeek'])['shifted_visitors'].transform(lambda x:x.rolling(window=1, min_periods=1).mean())
df['rolling_median_DayofWeek_shifted_visitors']=df.groupby(['air_store_id','DayofWeek'])['shifted_visitors'].transform(lambda x:x.rolling(window=1, min_periods=1).median())
df['rolling_std_DayofWeek_shifted_visitors']=df.groupby(['air_store_id','DayofWeek'])['shifted_visitors'].transform(lambda x: x.rolling(window=1, min_periods=1).std())
df['rolling_max_DayofWeek_shifted_visitors']=df.groupby(['air_store_id','DayofWeek'])['shifted_visitors'].transform(lambda x: x.rolling(window=1, min_periods=1).max())
df['rolling_min_DayofWeek_shifted_visitors']=df.groupby(['air_store_id','DayofWeek'])['shifted_visitors'].transform(lambda x: x.rolling(window=1, min_periods=1).min())

df['rolling_mean_shifted_visitors']=df.groupby(['air_store_id'])['shifted_visitors'].transform(lambda x:x.rolling(window=7, min_periods=1).mean())
df['rolling_median_shifted_visitors']=df.groupby(['air_store_id'])['shifted_visitors'].transform(lambda x:x.rolling(window=7, min_periods=1).median())
df['rolling_std_shifted_visitors']=df.groupby(['air_store_id'])['shifted_visitors'].transform(lambda x: x.rolling(window=7, min_periods=1).std())
df['rolling_max_shifted_visitors']=df.groupby(['air_store_id'])['shifted_visitors'].transform(lambda x: x.rolling(window=7, min_periods=1).max())
df['rolling_min_shifted_visitors']=df.groupby(['air_store_id'])['shifted_visitors'].transform(lambda x: x.rolling(window=7, min_periods=1).min())


train=df[df['is_test']==False].drop('is_test', axis=1).sort_values(['air_store_id','visit_date'])
test=df[df['is_test']==True].drop(['is_test','visitors'], axis=1).sort_values(['air_store_id','visit_date'])

del area_genre_count
gc.collect()

train = train.fillna(-1)
test = test.fillna(-1)

sns.set(style="white")
corr = train.corr()
mask = np.triu(np.ones_like(corr, dtype=np.bool))
f, ax = plt.subplots(figsize=(65, 60))
cmap = sns.diverging_palette(220, 10, as_cmap=True)
plt.title('Correlation Matrix', fontsize=18)
sns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,
            square=True, linewidths=.5, cbar_kws={"shrink": .5}, annot=True)
plt.show()

def correlation(dataset, threshold):
    col_corr = set() # Set of all the names of deleted columns
    corr_matrix = dataset.corr().abs()
    for i in range(len(corr_matrix.columns)):
        for j in range(i):
            if (corr_matrix.iloc[i, j] >= threshold) and (corr_matrix.columns[j] not in col_corr):
                colname = corr_matrix.columns[i] # getting the name of column
                col_corr.add(colname)
    return col_corr

cols_to_drop=correlation(train,0.9)

cols_to_drop

train.drop(cols_to_drop, axis=1, inplace=True)
test.drop(cols_to_drop, axis=1, inplace=True)

train=reduce_mem_usage(train)
test=reduce_mem_usage(test)

train.to_csv('Recruit_Restaurant_train.csv', index=False)
test.to_csv('Recruit_Restaurant_test.csv', index=False)

from google.colab import files

files.download('Recruit_Restaurant_train.csv')
files.download('Recruit_Restaurant_test.csv')