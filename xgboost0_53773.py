# -*- coding: utf-8 -*-
"""Recruit Restaurant Visitor Forecasting_XGBoost0.53773.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ish19eBL1_csVVhs0EW9ccXc8SE9yGFC
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import KFold, train_test_split
import random
from sklearn.metrics import mean_squared_error as mse

import warnings
warnings.filterwarnings('ignore')
import gc

def RMSLE(y_pred, y_test):
    return np.sqrt(mse(y_test,y_pred))

train=pd.read_csv('Recruit_Restaurant_train.csv')
test=pd.read_csv('Recruit_Restaurant_test.csv')

train.drop(['air_store_id','visit_date','latitude','longitude'], axis=1, inplace=True)
test.drop(['air_store_id','visit_date','latitude','longitude'], axis=1, inplace=True)

X=train.drop('visitors', axis=1)
y=train['visitors']
X_test=test

cat_cols=[col for col in X.columns if X[col].dtype in ['object', 'category'] ]

cat_cols

from sklearn.preprocessing import LabelEncoder

def encode_onehot(df,column_name):
    feature_df=pd.get_dummies(df[column_name], prefix=column_name)
    all = pd.concat([df.drop([column_name], axis=1),feature_df], axis=1)
    return all

#df=pd.concat([X,X_test])
#df=encode_onehot(df,'air_genre_name')
#X=df.iloc[:len(X)]
#X_test=df.iloc[len(X):]

for f in cat_cols:
  lbl = LabelEncoder()
  lbl.fit(list(X[f].values) + list(X_test[f].values))
  X[f] = lbl.transform(list(X[f].values))
  X_test[f] = lbl.transform(list(X_test[f].values))

def seed_everything(seed=0):
    random.seed(seed)
    np.random.seed(seed)

import xgboost as xgb

SEED=2022
seed_everything(SEED)

params = {
         'n_estimators': 5000,
         'max_depth':10,
         'eval_metric':'rmse',
         'eta':0.1, #learning rate
         'subsample':0.9,
         'colsample_bytree':0.85,
         'silent':1,
         'objective':'reg:squarederror',
          'tree_method':'gpu_hist',
          #'tree_method':'hist'          
         }

NFOLDS=5
seed_range=3
kf=KFold(n_splits=NFOLDS)

preds_seed=np.zeros((X_test.shape[0],seed_range))
val_preds_seed=np.zeros((X.shape[0],seed_range))

for i, s in enumerate(range(SEED, SEED+seed_range)):
  print('SEED:', s)
  preds = np.zeros((X_test.shape[0], NFOLDS))
  val_preds=np.zeros(X.shape[0])
  seed_everything(s)
  params['seed'] = s
  
  for j, (train_idx, test_idx) in enumerate(kf.split(X)):
    fold = j + 1
    print('Fold:',fold)

    kf_X_train=X.iloc[train_idx]
    kf_y_train=y.iloc[train_idx]
    
    kf_X_test=X.iloc[test_idx]
    kf_y_test=y.iloc[test_idx]

    reg = xgb.XGBRegressor(**params)
    reg.fit(kf_X_train, kf_y_train, eval_set=[(kf_X_test,kf_y_test)], verbose=100, early_stopping_rounds=500)

    val_preds[test_idx]+= reg.predict(X.iloc[test_idx])
    preds[:, j] = reg.predict(X_test) 

  preds=np.mean(preds, axis=1)
  preds_seed[:,i]=preds
  val_preds_seed[:,i]=val_preds

y_pred=np.expm1(np.mean(preds_seed, axis=1))

y_pred.min()

np.save('pred_XGB.npy', y_pred)

val_preds_final=np.mean(val_preds_seed,axis=1)

RMSLE(val_preds_final, y)

"""**Submission**"""

submission=pd.read_csv('sample_submission.csv')

submission['visitors']=y_pred

submission.to_csv('submission_XGB.csv', index=False, float_format='%.3f')

from google.colab import files

files.download('submission_XGB.csv')